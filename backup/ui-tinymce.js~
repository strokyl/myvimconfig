/**
 * Binds a TinyMCE widget to <textarea> elements.
 */
angular.module('ui.tinymce', [])
  .value('uiTinymceConfig', {
			"content_css" : "css/DCT_VF_V3AF.css",
			"theme_advanced_more_colors" : false, 
			"style_formats":[
	                 	{"title" : "1- Sur tire paragraphe couleur theme", "selector":"p", "classes":"surtitreParagraphe"},
	                	{"title" : "2- Titre paragraphe bleu AF apres le surtitre", "selector":"p", "classes":"titreParagraphe"},
	                	{"title" : "3- Sous titre paragraphe bleu AF", "selector":"p", "classes":"sousTitreParagraphe"},
	                	{"title" : "4- Texte normal", "selector":"p", "classes":"texteNormal"},
	                	{"title" : "5- Texte en exergue", "selector":"p", "classes":"exergue"},
	                	{"title" : "Couleur texte normal", "selector":"p", "classes":"tx_c1"},
	                	{"title" : "Couleur Bleu AF", "selector":"p", "classes":"tx_c2"},
	                	{"title" : "Theme Compagnie (blue)", "selector":"p", "classes":"tx_c3"},
	                	{"title" : "Theme Metier (red)", "selector":"p", "classes":"tx_c4"},
	                	{"title" : "Theme Pratique (cyan)", "selector":"p", "classes":"tx_c5"},
	                	{"title" : "Theme Parcours (yellow)", "selector":"p", "classes":"tx_c6"},
	                	{"title" : "Theme Entre nous (green)", "selector":"p", "classes":"tx_c7"},
	                	{"title" : "Theme Environnement (purple)", "selector":"p", "classes":"tx_c8"},
	                	{"title" : "Fond blanc", "selector":"p", "classes":"Fond_blanc"},
	                	{"title" : "Fond vif rouge", "selector":"p", "classes":"bg_v1"},
	                	{"title" : "Fond vif bordeau", "selector":"p", "classes":"bg_v2"},
	                	{"title" : "Fond vif violet", "selector":"p", "classes":"bg_v3"},
	                	{"title" : "Fond vif bleu 1", "selector":"p", "classes":"bg_v4"},
	                	{"title" : "Fond vif bleu 2", "selector":"p", "classes":"bg_v5"},
	                	{"title" : "Fond vif turquoise", "selector":"p", "classes":"bg_v6"},
	                	{"title" : "Fond vif kaki", "selector":"p", "classes":"bg_v7"},
	                	{"title" : "Fond vif marron", "selector":"p", "classes":"bg_v8"},
	                	{"title" : "Fond vif jaune", "selector":"p", "classes":"bg_v9"},
	                	{"title" : "Fond secondaire bleu 1", "selector":"p", "classes":"bg_c1"},
	                	{"title" : "Fond secondaire turquoise", "selector":"p", "classes":"bg_c2"},
	                	{"title" : "Fond secondaire gris 1", "selector":"p", "classes":"bg_c3"},
	                	{"title" : "Fond secondaire bleu 2", "selector":"p", "classes":"bg_c4"},
	                	{"title" : "Fond secondaire bleu 3", "selector":"p", "classes":"bg_c5"},
	                	{"title" : "Fond secondaire gris 2", "selector":"p", "classes":"bg_c6"},
	                	{"title" : "Fond secondaire gris 3", "selector":"p", "classes":"bg_c7"},
	                	{"title" : "Fond secondaire beige 1", "selector":"p", "classes":"bg_c8"},
	                	{"title" : "Fond secondaire beige 2", "selector":"p", "classes":"bg_c9"},
	                	{"title" : "Fond secondaire gris 4", "selector":"p", "classes":"bg_c10"},
	                	{"title" : "Fond secondaire rose", "selector":"p", "classes":"bg_c11"},
	                	{"title" : "Fond secondaire orange", "selector":"p", "classes":"bg_c12"},
	                	{"title" : "Fond secondaire vert 1", "selector":"p", "classes":"bg_c13"},
	                	{"title" : "Fond secondaire vert 2", "selector":"p", "classes":"bg_c14"}
	                ],
			"invalid_elements" : "script,object,embed,iframe,pres,div,layer,h1,h2,h3,h4,h5",
			"extended_valid_elements" : "td[abbr|align<center?char?justify?left?right|axis|bgcolor|char|charoff|class"
			  +"|colspan|dir<ltr?rtl|headers|height|id|lang|nowrap<nowrap|onclick"
			  +"|ondblclick|onkeydown|onkeypress|onkeyup|onmousedown|onmousemove"
			  +"|onmouseout|onmouseover|onmouseup|rowspan|scope<col?colgroup?row?rowgroup"
			  +"|style|title|valign<baseline?bottom?middle?top|width],"
			  +"th[abbr|align<center?char?justify?left?right|axis|bgcolor|char|charoff|class"
			  +"|colspan|dir<ltr?rtl|headers|height|id|lang|nowrap<nowrap|onclick"
			  +"|ondblclick|onkeydown|onkeypress|onkeyup|onmousedown|onmousemove"
			  +"|onmouseout|onmouseover|onmouseup|rowspan|scope<col?colgroup?row?rowgroup"
			  +"|style|title|valign<baseline?bottom?middle?top|width]",

			"width" : "500", 
			"height" : "200", 
			//IntraBrowserImage, IntraBrowserLink, advimage
			"plugins" : "print,advimage,IntraRemoveEmptyParagraph,IntraInsertTableV03, searchreplace, link, table, charmap", 
			"menubar" : false,
			//intraBrowserImage, intraBrowserLink, image
			/*"toolbarRow"*/ "toolbar" : ["code,cut,copy,paste,pasteword,searchreplace,print,|,undo,redo,|,link,unlink,|,table,IntraInsertTableV03,|"
			,",styleselect,bold,italic,underline,|,alignleft,aligncenter,alignright,alignfull,|,charmap,|,bullist,numlist,IntraRemoveEmptyParagraph"],
			    "paste_auto_cleanup_on_paste" : true,
			    "paste_remove_styles" : false
    		}
)
  .directive('uiTinymce', ['uiTinymceConfig', function (uiTinymceConfig) {
    uiTinymceConfig = uiTinymceConfig || {};
    var generatedIds = 0;
    return {
      priority: 10,
      require: 'ngModel',
      link: function (scope, elm, attrs, ngModel) {
    	
        var expression, options, tinyInstance,
          updateView = function () {

            ngModel.$setViewValue(elm.val());
            if (!scope.$root.$$phase) {
              scope.$apply();
            }
          };

        // generate an ID if not present
        if (!attrs.id) {
          attrs.$set('id', 'uiTinymce' + generatedIds++);
        }

        if (attrs.uiTinymce) {
          expression = scope.$eval(attrs.uiTinymce);
        } else {
          expression = {};
        }

        // make config'ed setup method available
        if (expression.setup) {
          var configSetup = expression.setup;
          delete expression.setup;
        }
        
    	scope.$watch(function(){
    		return ngModel.$modelValue;
    	}, function(modelValue) {
    		var tinyInstance = tinyMCE.get(attrs.id);
    		if(tinyInstance && tinyInstance.getContent() !== modelValue) {
    			tinyInstance.setContent(modelValue);
    		}
    	});

        options = {
          // Update model when calling setContent (such as from the source editor popup)
          setup: function (ed) {
            var args;
            ed.on('init', function(args) {
              ngModel.$render();
              ngModel.$setPristine();
            });
            // Update model on button click
            ed.on('ExecCommand', function (e) {
              ed.save();
              updateView();
            });
            // Update model on keypress
            ed.on('KeyUp', function (e) {
              ed.save();
              updateView();
            });
            // Update model on change, i.e. copy/pasted text, plugins altering content
            ed.on('SetContent', function (e) {
              if (!e.initial && ngModel.$viewValue !== e.content) {
                ed.save();
                updateView();
              }
            });
            ed.on('blur', function(e) {
                elm.blur();
            });
            // Update model when an object has been resized (table, image)
            ed.on('ObjectResized', function (e) {
              ed.save();
              updateView();
            });
           
//         ed.onInit.add(function(args) {
//          ngModel.$render();
//          ngModel.$setPristine();
//        });
//        // Update model on button click
//        ed.onExecCommand.add(function (e) {
//          ed.save();
//          updateView();
//        });
//        // Update model on keypress
//        ed.onKeyUp.add( function (e) {
//          ed.save();
//          updateView();
//        });
//        // Update model on change, i.e. copy/pasted text, plugins altering content
//        ed.onSetContent.add(function (e) {
//          if (!e.initial && ngModel.$viewValue !== e.content) {
//            ed.save();
//            updateView();
//          }
//        });
//        ed.onDeactivate.add( function(e) {
//            elm.blur();
//        });
//        // Update model when an object has been resized (table, image)
//        ed.onNodeChange.add( function (e) {
//          ed.save();
//          updateView();
//        });
            if (configSetup) {
              configSetup(ed);
            }
          },
          mode: 'exact',
          selector: "#" + attrs.id
        };
        // extend options with initial uiTinymceConfig and options from directive attribute value
        angular.extend(options, uiTinymceConfig, expression);
        setTimeout(function () {
          tinyMCE.init(options);
        }, 100);

        ngModel.$render = function() {
          if (!tinyInstance) {
            tinyInstance = tinymce.get(attrs.id);
          }
          if (tinyInstance) {
            tinyInstance.setContent(ngModel.$viewValue || '');
          }
        };

        scope.$on('$destroy', function() {
          if (!tinyInstance) { tinyInstance = tinyMCE.get(attrs.id); }
          if (tinyInstance) {
            tinyInstance.remove();
            tinyInstance = null;
          }
        });
      }
    };
  }]);
